from itertools import permutations

def prime_list(n):  # 출처 : 위키피디아
    # 에라토스테네스의 체 초기화: n개 요소에 True 설정(소수로 간주)
    sieve = [True] * n

    # n의 최대 약수가 sqrt(n) 이하이므로 i=sqrt(n)까지 검사
    m = int(n ** 0.5)
    for i in range(2, m + 1):
        if sieve[i] == True:           # i가 소수인 경우
            for j in range(i+i, n, i): # i이후 i의 배수들을 False 판정
                sieve[j] = False

    # 소수 목록 산출
    return [i for i in range(2, n) if sieve[i] == True]


def solution(numbers):
    # 소수로 이루어진 리스트 만든다.

    lst = prime_list(10**len(numbers))

    # 만들 수 있는 경우의 수를 찾는다.
    arr = list(numbers)

    cnt = 0
    ans = []

    for i in range(1, len(numbers)+1):
        a = list(map(int, map(''.join, permutations(arr, i))))
        ans.extend(a)

    # print(ans)
    res = list(set(ans))

    for i in res:
        if i in lst:
            cnt += 1

    answer = cnt
    return answer